import cv2
import numpy as np

def detect_edges(image_path, option):
    # Carregar a imagem em escala de cinza
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    
    if option == 'A':
        edges = cv2.filter2D(image, -1, np.array([[1, 0], [0, -1]]))
    elif option == 'B':
        edges = cv2.filter2D(image, -1, np.array([[0, 1], [-1, 0]]))
    elif option == 'C':
        edges = cv2.filter2D(image, -1, np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]]))
    elif option == 'D':
        edges = cv2.filter2D(image, -1, np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]]).T)
    elif option == 'E':
        edges_x = cv2.filter2D(image, -1, np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]]))
        edges_y = cv2.filter2D(image, -1, np.array([[-1, -1, -1], [0, 0, 0], [1, 1, 1]]))
        edges = np.sqrt(edges_x ** 2 + edges_y ** 2).astype(np.uint8)
    elif option == 'F':
        edges = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    elif option == 'G':
        edges = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
    elif option == 'H':
        edges_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
        edges_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
        edges = np.sqrt(edges_x ** 2 + edges_y ** 2).astype(np.uint8)
    elif option == 'I':
        edges = cv2.filter2D(image, -1, np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]]))
    elif option == 'J':
        edges = cv2.filter2D(image, -1, np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]))
    elif option == 'K':
        edges = cv2.filter2D(image, -1, np.array([[1, np.sqrt(2), 1], [0, 0, 0], [-1, -np.sqrt(2), -1]]))
    elif option == 'L':
        edges = cv2.Laplacian(image, cv2.CV_64F)
        edges = np.absolute(edges).astype(np.uint8)
    elif option == 'M':
        edges = cv2.filter2D(image, -1, np.array([[-1, -1, -1], [-1, 8, -1], [-1, -1, -1]]))
    else:
        return None
    
    # Mostrar a imagem resultante
    cv2.imshow('Detecção de Bordas', edges)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def main():
    image_path = 'implementacoes\images\segmentacao.png'
    
    print("Menu:")
    print("a. Roberts")
    print("b. Roberts cruzado")
    print("c. Prewitt Gx")
    print("d. Prewitt Gy")
    print("e. Prewitt magnitude")
    print("f. Sobel Gx")
    print("g. Sobel Gy")
    print("h. Sobel magnitude")
    print("i. Krish")
    print("j. Robison")
    print("k. Frey-Chen")
    print("l. Laplaciano")
    print("m. H1 e H2")
    
    option = input("Selecione uma opção (a-l): ").lower()
    
    detect_edges(image_path, option)

if __name__ == "__main__":
    main()
